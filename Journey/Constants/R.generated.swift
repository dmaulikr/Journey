// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct file {
    static let ralewayRegularTtf = FileResource(bundle: _R.hostingBundle, name: "Raleway-Regular", pathExtension: "ttf")
    
    static func ralewayRegularTtf(_: Void) -> NSURL? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle?.URLForResource(fileResource)
    }
    
    static func ralewayRegularTtf(_: Void) -> String? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle?.pathForResource(fileResource)
    }
  }
  
  struct font {
    static let ralewayRegular = FontResource(fontName: "Raleway-Regular")
    
    static func ralewayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: ralewayRegular, size: size)
    }
  }
  
  struct image {
    static let iconClose = ImageResource(bundle: _R.hostingBundle, name: "icon-close")
    static let iconMenu = ImageResource(bundle: _R.hostingBundle, name: "icon-menu")
    static let iconPhoto = ImageResource(bundle: _R.hostingBundle, name: "icon-photo")
    static let iconPlus = ImageResource(bundle: _R.hostingBundle, name: "icon-plus")
    static let momentDemo = ImageResource(bundle: _R.hostingBundle, name: "moment-demo")
    
    static func iconClose(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconClose, compatibleWithTraitCollection: traitCollection)
    }
    
    static func iconMenu(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconMenu, compatibleWithTraitCollection: traitCollection)
    }
    
    static func iconPhoto(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconPhoto, compatibleWithTraitCollection: traitCollection)
    }
    
    static func iconPlus(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconPlus, compatibleWithTraitCollection: traitCollection)
    }
    
    static func momentDemo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.momentDemo, compatibleWithTraitCollection: traitCollection)
    }
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
  }
  
  struct nib {
    static let momentView = _R.nib._MomentView()
    
    static func momentView(_: Void) -> UINib {
      return UINib(resource: R.nib.momentView)
    }
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    static let foundation = _R.storyboard.foundation()
    static let home = _R.storyboard.home()
    static let launchScreen = _R.storyboard.launchScreen()
    static let settings = _R.storyboard.settings()
    
    static func foundation(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.foundation)
    }
    
    static func home(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.home)
    }
    
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    static func settings(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.settings)
    }
  }
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "io.ltebean.Journey")
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MomentView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "MomentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
    }
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try foundation.validate()
      try settings.validate()
      try home.validate()
    }
    
    struct foundation: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let name = "foundation"
      
      func datePicker() -> DatePicker? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("datePicker") as? DatePicker
      }
      
      static func validate() throws {
        if _R.storyboard.foundation().datePicker() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'datePicker' could not be loaded from storyboard 'foundation' as 'DatePicker'.") }
      }
    }
    
    struct home: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController
      
      let bundle = _R.hostingBundle
      let name = "home"
      
      func editor() -> MomentEditorViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("editor") as? MomentEditorViewController
      }
      
      static func validate() throws {
        if UIImage(named: "icon-plus") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-plus' is used in storyboard 'home', but couldn't be loaded.") }
        if UIImage(named: "icon-photo") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-photo' is used in storyboard 'home', but couldn't be loaded.") }
        if UIImage(named: "icon-close") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-close' is used in storyboard 'home', but couldn't be loaded.") }
        if UIImage(named: "icon-menu") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-menu' is used in storyboard 'home', but couldn't be loaded.") }
        if _R.storyboard.home().editor() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'editor' could not be loaded from storyboard 'home' as 'MomentEditorViewController'.") }
      }
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
    }
    
    struct settings: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let name = "settings"
      
      func main() -> SettingsViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("main") as? SettingsViewController
      }
      
      static func validate() throws {
        if UIImage(named: "icon-close") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-close' is used in storyboard 'settings', but couldn't be loaded.") }
        if _R.storyboard.settings().main() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'settings' as 'SettingsViewController'.") }
      }
    }
  }
}